{
  "contractName": "BaseATMProxy",
  "abi": [
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "atmSettings",
      "outputs": [
        {
          "internalType": "contract IATMSettings",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"atmSettings\",\"outputs\":[{\"internalType\":\"contract IATMSettings\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"develop@teller.finance\",\"methods\":{\"implementation()\":{\"return\":\"Address of the current implementation\"}}},\"userdoc\":{\"methods\":{\"implementation()\":{\"notice\":\"Returns the current implementation.\"}},\"notice\":\"It is the base Proxy contract for all ATM contracts.\"}},\"settings\":{\"compilationTarget\":{\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATMProxy.sol\":\"BaseATMProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATM.sol\":{\"keccak256\":\"0x320fada9d009a48c4e04f17a172f18b7cf98694e85388530c062f081418d48a6\",\"urls\":[\"bzz-raw://2ee3c4aaadf693ea2fc543ece5b2acb0be54fe3d6be9bc164c6156a42ba2ac2c\",\"dweb:/ipfs/QmeqA4S9b5N9Whm9rVpAss2LemC6feayCwyzsiqADedcMi\"]},\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATMProxy.sol\":{\"keccak256\":\"0x9d8f29c4ce93cb6de947ea483fd287d62a15d8bf16cd14e2f540f6936f507269\",\"urls\":[\"bzz-raw://ce8dafa77644b0b910cdb3a4ac773977dede01bfc28076dd9e544a254c1e0ad5\",\"dweb:/ipfs/QmTwzapZLvKNSxD28kAGiuFafLsLouv1CppojrUn57KSFu\"]},\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/base/BaseProxy.sol\":{\"keccak256\":\"0xd93ca9dc41b329c04070c4dfb1370646ab3b24a5e8d582b2de81bef3b2fc28bc\",\"urls\":[\"bzz-raw://f5f18321b6aa447e85188ab99753423c7bed581561a935eab3da82ba46f92734\",\"dweb:/ipfs/QmRi9jxg722XeNp6uVotWUkgjPJt13zoCdxwEcVkZQxyu3\"]},\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/interfaces/SettingsInterface.sol\":{\"keccak256\":\"0x425cc07c2fc7ae0ad8aa2b23a3aa3b7a44f84047344ab88714502aef018200f2\",\"urls\":[\"bzz-raw://f7f20c0780c2aad569edbb214375616bbb28de334623b7005fa4490e5bc61f5f\",\"dweb:/ipfs/QmdPLfJxEBiNhgFkhNe7AS92cfcDzqLBPQaMHabxhynmG9\"]},\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/settings/IATMSettings.sol\":{\"keccak256\":\"0x0dac741a2ac83d2983852886597221cdc07099c46761d718e3e2afb03f2cf322\",\"urls\":[\"bzz-raw://b4704eda2956c8caaa321eba013575f3481678b8b3f69e396d4160d385f2126a\",\"dweb:/ipfs/QmR4AyWVoi66LFLrR37RPh3YszAhMVY82Z9Y8UXbiRCcXW\"]},\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/util/AddressLib.sol\":{\"keccak256\":\"0x8a80e4d41132c052ccd109ba299be9a026226b6b9a3ed7b8db203aa95029cfc7\",\"urls\":[\"bzz-raw://6b685861a3c48117bcb441fe8c008a6c04499d5f7d85e33bb052f1bbdb86d702\",\"dweb:/ipfs/QmSiRbzC4SHMFYQhA97aNZCZzBo9SbL8XPWvcCUbTwMLKn\"]},\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/util/AssetSettingsLib.sol\":{\"keccak256\":\"0x982efd04a5514334651af912199202a054302e924ff3913c13b90f0281e239b3\",\"urls\":[\"bzz-raw://a39501ddbe7697a5c1fb9b93669598ec457e2d80c3b8419951a60c1a3d481fe7\",\"dweb:/ipfs/QmQcycnVeWDiFTfoHygDn139aqa6vwJHmU3u5Ha3y2LsUm\"]},\"/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/util/PlatformSettingsLib.sol\":{\"keccak256\":\"0xd428c06d3a5fe7ec35f0b087dd2a9aec22f73c5737d04cd47a46410012a933ec\",\"urls\":[\"bzz-raw://f2f904a9111d1bcce6f97bb9e0cd5b15d0a707635a7198bd841107b7d286feb9\",\"dweb:/ipfs/QmQhSnFBuD7m28QMeBuxHsxfkpMZagjsMeKzFUpSs2Mvzh\"]},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f\",\"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq\"]},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\",\"urls\":[\"bzz-raw://03335b7b07c7c8c8d613cfdd8ec39a0b5ec133ee510bf2fe6cc5a496767bef4b\",\"dweb:/ipfs/Qmebp4nzPja645c9yXSdJkGq96oU3am3LUnG2K3R7XxyKf\"]},\"@openzeppelin/upgrades/contracts/upgradeability/Proxy.sol\":{\"keccak256\":\"0xd8074ae5fa7ee6384ca8196a896612fb044bbf4ff4b7336d03cd97845000ac21\",\"urls\":[\"bzz-raw://3a111e1dc777d80e6c2ad41c6ff2bfb3ae8f61658fd6580ddf9ba9ab0d25a354\",\"dweb:/ipfs/QmSfwvUqqiownzHeMmUiYkejWs6FXR2KLtHQnSzP6FivTj\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity 0.5.17;\n\nimport \"../base/BaseProxy.sol\";\nimport \"./BaseATM.sol\";\n\n/**\n    @notice It is the base Proxy contract for all ATM contracts.\n\n    @author develop@teller.finance\n */\ncontract BaseATMProxy is BaseProxy, BaseATM {\n    /** Internal Functions **/\n\n    /**\n        @notice It is the logic of grabbing the ATMSettings contract address from state and getting child contract logic implementation address.\n        @return address of the current implementation logic for the child contract\n     */\n    function _implementation() internal view returns (address imp) {\n        imp = _getImplementation(address(atmSettings));\n    }\n\n    /**\n        @notice It is the logic of grabbing the child logic implementation address from an ATMSettings contract address.\n        @param atmSettingsAddress address of an ATMSettings contract\n        @return current child contract logic implementation\n     */\n    function _getImplementation(address atmSettingsAddress) internal view returns (address);\n}\n",
  "sourcePath": "/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATMProxy.sol",
  "ast": {
    "absolutePath": "/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATMProxy.sol",
    "exportedSymbols": {
      "BaseATMProxy": [
        1280
      ]
    },
    "id": 1281,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1252,
        "literals": [
          "solidity",
          "0.5",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "absolutePath": "/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/base/BaseProxy.sol",
        "file": "../base/BaseProxy.sol",
        "id": 1253,
        "nodeType": "ImportDirective",
        "scope": 1281,
        "sourceUnit": 2442,
        "src": "25:31:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATM.sol",
        "file": "./BaseATM.sol",
        "id": 1254,
        "nodeType": "ImportDirective",
        "scope": 1281,
        "sourceUnit": 1251,
        "src": "57:23:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1255,
              "name": "BaseProxy",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2441,
              "src": "216:9:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BaseProxy_$2441",
                "typeString": "contract BaseProxy"
              }
            },
            "id": 1256,
            "nodeType": "InheritanceSpecifier",
            "src": "216:9:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1257,
              "name": "BaseATM",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1250,
              "src": "227:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BaseATM_$1250",
                "typeString": "contract BaseATM"
              }
            },
            "id": 1258,
            "nodeType": "InheritanceSpecifier",
            "src": "227:7:7"
          }
        ],
        "contractDependencies": [
          1250,
          2441,
          17045
        ],
        "contractKind": "contract",
        "documentation": "@notice It is the base Proxy contract for all ATM contracts.\n@author develop@teller.finance",
        "fullyImplemented": false,
        "id": 1280,
        "linearizedBaseContracts": [
          1280,
          1250,
          2441,
          17045
        ],
        "name": "BaseATMProxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1271,
              "nodeType": "Block",
              "src": "580:63:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1269,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1263,
                      "name": "imp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1261,
                      "src": "590:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1266,
                              "name": "atmSettings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1234,
                              "src": "623:11:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IATMSettings_$11231",
                                "typeString": "contract IATMSettings"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IATMSettings_$11231",
                                "typeString": "contract IATMSettings"
                              }
                            ],
                            "id": 1265,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "615:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 1267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "615:20:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1264,
                        "name": "_getImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1279,
                        "src": "596:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                          "typeString": "function (address) view returns (address)"
                        }
                      },
                      "id": 1268,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "596:40:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "590:46:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1270,
                  "nodeType": "ExpressionStatement",
                  "src": "590:46:7"
                }
              ]
            },
            "documentation": "@notice It is the logic of grabbing the ATMSettings contract address from state and getting child contract logic implementation address.\n@return address of the current implementation logic for the child contract",
            "id": 1272,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_implementation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "541:2:7"
            },
            "returnParameters": {
              "id": 1262,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1261,
                  "name": "imp",
                  "nodeType": "VariableDeclaration",
                  "scope": 1272,
                  "src": "567:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1260,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "567:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "566:13:7"
            },
            "scope": 1280,
            "src": "517:126:7",
            "stateMutability": "view",
            "superFunction": 17021,
            "visibility": "internal"
          },
          {
            "body": null,
            "documentation": "@notice It is the logic of grabbing the child logic implementation address from an ATMSettings contract address.\n@param atmSettingsAddress address of an ATMSettings contract\n@return current child contract logic implementation",
            "id": 1279,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_getImplementation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1274,
                  "name": "atmSettingsAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1279,
                  "src": "943:26:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1273,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "943:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "942:28:7"
            },
            "returnParameters": {
              "id": 1278,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1277,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1279,
                  "src": "994:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1276,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "994:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "993:9:7"
            },
            "scope": 1280,
            "src": "915:88:7",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1281,
        "src": "191:814:7"
      }
    ],
    "src": "0:1006:7"
  },
  "legacyAST": {
    "absolutePath": "/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATMProxy.sol",
    "exportedSymbols": {
      "BaseATMProxy": [
        1280
      ]
    },
    "id": 1281,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1252,
        "literals": [
          "solidity",
          "0.5",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "absolutePath": "/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/base/BaseProxy.sol",
        "file": "../base/BaseProxy.sol",
        "id": 1253,
        "nodeType": "ImportDirective",
        "scope": 1281,
        "sourceUnit": 2442,
        "src": "25:31:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/sy/Documents/GitHub/teller-protocol-v1/contracts/atm/BaseATM.sol",
        "file": "./BaseATM.sol",
        "id": 1254,
        "nodeType": "ImportDirective",
        "scope": 1281,
        "sourceUnit": 1251,
        "src": "57:23:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1255,
              "name": "BaseProxy",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2441,
              "src": "216:9:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BaseProxy_$2441",
                "typeString": "contract BaseProxy"
              }
            },
            "id": 1256,
            "nodeType": "InheritanceSpecifier",
            "src": "216:9:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1257,
              "name": "BaseATM",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1250,
              "src": "227:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BaseATM_$1250",
                "typeString": "contract BaseATM"
              }
            },
            "id": 1258,
            "nodeType": "InheritanceSpecifier",
            "src": "227:7:7"
          }
        ],
        "contractDependencies": [
          1250,
          2441,
          17045
        ],
        "contractKind": "contract",
        "documentation": "@notice It is the base Proxy contract for all ATM contracts.\n@author develop@teller.finance",
        "fullyImplemented": false,
        "id": 1280,
        "linearizedBaseContracts": [
          1280,
          1250,
          2441,
          17045
        ],
        "name": "BaseATMProxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1271,
              "nodeType": "Block",
              "src": "580:63:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1269,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1263,
                      "name": "imp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1261,
                      "src": "590:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1266,
                              "name": "atmSettings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1234,
                              "src": "623:11:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IATMSettings_$11231",
                                "typeString": "contract IATMSettings"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IATMSettings_$11231",
                                "typeString": "contract IATMSettings"
                              }
                            ],
                            "id": 1265,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "615:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 1267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "615:20:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1264,
                        "name": "_getImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1279,
                        "src": "596:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                          "typeString": "function (address) view returns (address)"
                        }
                      },
                      "id": 1268,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "596:40:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "590:46:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1270,
                  "nodeType": "ExpressionStatement",
                  "src": "590:46:7"
                }
              ]
            },
            "documentation": "@notice It is the logic of grabbing the ATMSettings contract address from state and getting child contract logic implementation address.\n@return address of the current implementation logic for the child contract",
            "id": 1272,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_implementation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "541:2:7"
            },
            "returnParameters": {
              "id": 1262,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1261,
                  "name": "imp",
                  "nodeType": "VariableDeclaration",
                  "scope": 1272,
                  "src": "567:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1260,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "567:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "566:13:7"
            },
            "scope": 1280,
            "src": "517:126:7",
            "stateMutability": "view",
            "superFunction": 17021,
            "visibility": "internal"
          },
          {
            "body": null,
            "documentation": "@notice It is the logic of grabbing the child logic implementation address from an ATMSettings contract address.\n@param atmSettingsAddress address of an ATMSettings contract\n@return current child contract logic implementation",
            "id": 1279,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_getImplementation",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1274,
                  "name": "atmSettingsAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1279,
                  "src": "943:26:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1273,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "943:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "942:28:7"
            },
            "returnParameters": {
              "id": 1278,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1277,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1279,
                  "src": "994:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1276,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "994:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "993:9:7"
            },
            "scope": 1280,
            "src": "915:88:7",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1281,
        "src": "191:814:7"
      }
    ],
    "src": "0:1006:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-08-28T22:57:03.808Z",
  "devdoc": {
    "author": "develop@teller.finance",
    "methods": {
      "implementation()": {
        "return": "Address of the current implementation"
      }
    }
  },
  "userdoc": {
    "methods": {
      "implementation()": {
        "notice": "Returns the current implementation."
      }
    },
    "notice": "It is the base Proxy contract for all ATM contracts."
  }
}